<?php

/**
 * BaseUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property string $vorname
 * @property string $password
 * @property string $login
 * @property Doctrine_Collection $Newsletters
 * 
 * @method string              getName()        Returns the current record's "name" value
 * @method string              getVorname()     Returns the current record's "vorname" value
 * @method string              getPassword()    Returns the current record's "password" value
 * @method string              getLogin()       Returns the current record's "login" value
 * @method Doctrine_Collection getNewsletters() Returns the current record's "Newsletters" collection
 * @method User                setName()        Sets the current record's "name" value
 * @method User                setVorname()     Sets the current record's "vorname" value
 * @method User                setPassword()    Sets the current record's "password" value
 * @method User                setLogin()       Sets the current record's "login" value
 * @method User                setNewsletters() Sets the current record's "Newsletters" collection
 * 
 * @package    tgnews
 * @subpackage model
 * @author     Frank Mattes
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseUser extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('user');
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('vorname', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('password', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('login', 'string', 50, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => true,
             'length' => 50,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Newsletter as Newsletters', array(
             'local' => 'id',
             'foreign' => 'user_id'));
    }
}